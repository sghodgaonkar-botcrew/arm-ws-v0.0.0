/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: arm_msgs.idl
  Source: arm_msgs.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_ARM_MSGS_HPP
#define DDSCXX_ARM_MSGS_HPP

#include <cstdint>
#include <string>

namespace arm_msgs
{
class Time
{
private:
 int32_t sec_ = 0;
 uint32_t nanosec_ = 0;

public:
  Time() = default;

  explicit Time(
    int32_t sec,
    uint32_t nanosec) :
    sec_(sec),
    nanosec_(nanosec) { }

  int32_t sec() const { return this->sec_; }
  int32_t& sec() { return this->sec_; }
  void sec(int32_t _val_) { this->sec_ = _val_; }
  uint32_t nanosec() const { return this->nanosec_; }
  uint32_t& nanosec() { return this->nanosec_; }
  void nanosec(uint32_t _val_) { this->nanosec_ = _val_; }

  bool operator==(const Time& _other) const
  {
    (void) _other;
    return sec_ == _other.sec_ &&
      nanosec_ == _other.nanosec_;
  }

  bool operator!=(const Time& _other) const
  {
    return !(*this == _other);
  }

};

class Header
{
private:
 ::arm_msgs::Time stamp_;
 std::string frame_id_;

public:
  Header() = default;

  explicit Header(
    const ::arm_msgs::Time& stamp,
    const std::string& frame_id) :
    stamp_(stamp),
    frame_id_(frame_id) { }

  const ::arm_msgs::Time& stamp() const { return this->stamp_; }
  ::arm_msgs::Time& stamp() { return this->stamp_; }
  void stamp(const ::arm_msgs::Time& _val_) { this->stamp_ = _val_; }
  void stamp(::arm_msgs::Time&& _val_) { this->stamp_ = _val_; }
  const std::string& frame_id() const { return this->frame_id_; }
  std::string& frame_id() { return this->frame_id_; }
  void frame_id(const std::string& _val_) { this->frame_id_ = _val_; }
  void frame_id(std::string&& _val_) { this->frame_id_ = _val_; }

  bool operator==(const Header& _other) const
  {
    (void) _other;
    return stamp_ == _other.stamp_ &&
      frame_id_ == _other.frame_id_;
  }

  bool operator!=(const Header& _other) const
  {
    return !(*this == _other);
  }

};

class Point
{
private:
 double x_ = 0.0;
 double y_ = 0.0;
 double z_ = 0.0;

public:
  Point() = default;

  explicit Point(
    double x,
    double y,
    double z) :
    x_(x),
    y_(y),
    z_(z) { }

  double x() const { return this->x_; }
  double& x() { return this->x_; }
  void x(double _val_) { this->x_ = _val_; }
  double y() const { return this->y_; }
  double& y() { return this->y_; }
  void y(double _val_) { this->y_ = _val_; }
  double z() const { return this->z_; }
  double& z() { return this->z_; }
  void z(double _val_) { this->z_ = _val_; }

  bool operator==(const Point& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_;
  }

  bool operator!=(const Point& _other) const
  {
    return !(*this == _other);
  }

};

class Quaternion
{
private:
 double x_ = 0.0;
 double y_ = 0.0;
 double z_ = 0.0;
 double w_ = 0.0;

public:
  Quaternion() = default;

  explicit Quaternion(
    double x,
    double y,
    double z,
    double w) :
    x_(x),
    y_(y),
    z_(z),
    w_(w) { }

  double x() const { return this->x_; }
  double& x() { return this->x_; }
  void x(double _val_) { this->x_ = _val_; }
  double y() const { return this->y_; }
  double& y() { return this->y_; }
  void y(double _val_) { this->y_ = _val_; }
  double z() const { return this->z_; }
  double& z() { return this->z_; }
  void z(double _val_) { this->z_ = _val_; }
  double w() const { return this->w_; }
  double& w() { return this->w_; }
  void w(double _val_) { this->w_ = _val_; }

  bool operator==(const Quaternion& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_ &&
      w_ == _other.w_;
  }

  bool operator!=(const Quaternion& _other) const
  {
    return !(*this == _other);
  }

};

class Pose
{
private:
 ::arm_msgs::Point position_;
 ::arm_msgs::Quaternion orientation_;

public:
  Pose() = default;

  explicit Pose(
    const ::arm_msgs::Point& position,
    const ::arm_msgs::Quaternion& orientation) :
    position_(position),
    orientation_(orientation) { }

  const ::arm_msgs::Point& position() const { return this->position_; }
  ::arm_msgs::Point& position() { return this->position_; }
  void position(const ::arm_msgs::Point& _val_) { this->position_ = _val_; }
  void position(::arm_msgs::Point&& _val_) { this->position_ = _val_; }
  const ::arm_msgs::Quaternion& orientation() const { return this->orientation_; }
  ::arm_msgs::Quaternion& orientation() { return this->orientation_; }
  void orientation(const ::arm_msgs::Quaternion& _val_) { this->orientation_ = _val_; }
  void orientation(::arm_msgs::Quaternion&& _val_) { this->orientation_ = _val_; }

  bool operator==(const Pose& _other) const
  {
    (void) _other;
    return position_ == _other.position_ &&
      orientation_ == _other.orientation_;
  }

  bool operator!=(const Pose& _other) const
  {
    return !(*this == _other);
  }

};

class JointAngles
{
private:
 double j1_ = 0.0;
 double j2_ = 0.0;
 double j3_ = 0.0;
 double j4_ = 0.0;
 double j5_ = 0.0;
 double j6_ = 0.0;

public:
  JointAngles() = default;

  explicit JointAngles(
    double j1,
    double j2,
    double j3,
    double j4,
    double j5,
    double j6) :
    j1_(j1),
    j2_(j2),
    j3_(j3),
    j4_(j4),
    j5_(j5),
    j6_(j6) { }

  double j1() const { return this->j1_; }
  double& j1() { return this->j1_; }
  void j1(double _val_) { this->j1_ = _val_; }
  double j2() const { return this->j2_; }
  double& j2() { return this->j2_; }
  void j2(double _val_) { this->j2_ = _val_; }
  double j3() const { return this->j3_; }
  double& j3() { return this->j3_; }
  void j3(double _val_) { this->j3_ = _val_; }
  double j4() const { return this->j4_; }
  double& j4() { return this->j4_; }
  void j4(double _val_) { this->j4_ = _val_; }
  double j5() const { return this->j5_; }
  double& j5() { return this->j5_; }
  void j5(double _val_) { this->j5_ = _val_; }
  double j6() const { return this->j6_; }
  double& j6() { return this->j6_; }
  void j6(double _val_) { this->j6_ = _val_; }

  bool operator==(const JointAngles& _other) const
  {
    (void) _other;
    return j1_ == _other.j1_ &&
      j2_ == _other.j2_ &&
      j3_ == _other.j3_ &&
      j4_ == _other.j4_ &&
      j5_ == _other.j5_ &&
      j6_ == _other.j6_;
  }

  bool operator!=(const JointAngles& _other) const
  {
    return !(*this == _other);
  }

};

class ArmCommand
{
private:
 ::arm_msgs::Header header_;
 ::arm_msgs::Pose pose_;

public:
  ArmCommand() = default;

  explicit ArmCommand(
    const ::arm_msgs::Header& header,
    const ::arm_msgs::Pose& pose) :
    header_(header),
    pose_(pose) { }

  const ::arm_msgs::Header& header() const { return this->header_; }
  ::arm_msgs::Header& header() { return this->header_; }
  void header(const ::arm_msgs::Header& _val_) { this->header_ = _val_; }
  void header(::arm_msgs::Header&& _val_) { this->header_ = _val_; }
  const ::arm_msgs::Pose& pose() const { return this->pose_; }
  ::arm_msgs::Pose& pose() { return this->pose_; }
  void pose(const ::arm_msgs::Pose& _val_) { this->pose_ = _val_; }
  void pose(::arm_msgs::Pose&& _val_) { this->pose_ = _val_; }

  bool operator==(const ArmCommand& _other) const
  {
    (void) _other;
    return header_ == _other.header_ &&
      pose_ == _other.pose_;
  }

  bool operator!=(const ArmCommand& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::arm_msgs::Time>::getTypeName()
{
  return "arm_msgs::Time";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::Time>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::Time>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::Time>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::Time>::type_map_blob_sz() { return 238; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::Time>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::Time>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00, 
 0x72,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e, 
 0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x5a,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00,  0x00,  0x36,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0xf1, 
 0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::Time>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e, 
 0x5d,  0x69,  0x42,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0, 
 0x8c,  0x10,  0x77,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::Header>::getTypeName()
{
  return "arm_msgs::Header";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::Header>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::Header>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::arm_msgs::Header>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::Header>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::Header>::type_map_blob_sz() { return 496; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::Header>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::Header>::type_map_blob() {
  static const uint8_t blob[] = {
 0xa7,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32, 
 0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1, 
 0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00, 
 0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e, 
 0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00,  0xfa,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d, 
 0x64,  0x5c,  0xd4,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73, 
 0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x2a, 
 0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x2a,  0x73,  0xbb, 
 0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d, 
 0x64,  0x5c,  0xd4,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b, 
 0xa6,  0x1f,  0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10, 
 0x77,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::Header>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb, 
 0x3b,  0xa6,  0x1f,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xab,  0xe3,  0x44, 
 0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d,  0x64,  0x5c,  0xd4,  0x00,  0x77,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00, 
 0x5e,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::Point>::getTypeName()
{
  return "arm_msgs::Point";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::Point>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::Point>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::Point>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::Point>::type_map_blob_sz() { return 262; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::Point>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::Point>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x7c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee, 
 0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0x00,  0x64,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee, 
 0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f, 
 0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::Point>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3, 
 0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee,  0x15,  0x90,  0x49,  0x60, 
 0x9f,  0xdc,  0xaf,  0x00,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::Quaternion>::getTypeName()
{
  return "arm_msgs::Quaternion";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::Quaternion>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::Quaternion>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::Quaternion>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::Quaternion>::type_map_blob_sz() { return 306; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::Quaternion>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::Quaternion>::type_map_blob() {
  static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb, 
 0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00, 
 0x98,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f, 
 0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e, 
 0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c, 
 0x3e,  0xc2,  0xb4,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d, 
 0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::Quaternion>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e, 
 0x5d,  0xd9,  0x26,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c, 
 0x3e,  0xc2,  0xb4,  0x00,  0x84,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::Pose>::getTypeName()
{
  return "arm_msgs::Pose";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::Pose>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::Pose>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::Pose>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::Pose>::type_map_blob_sz() { return 826; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::Pose>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::Pose>::type_map_blob() {
  static const uint8_t blob[] = {
 0x27,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb, 
 0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e, 
 0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x47,  0x57,  0xfe,  0x07,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9, 
 0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0xda,  0x16,  0x39,  0x42,  0xf1,  0xb4,  0x9c, 
 0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d, 
 0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41, 
 0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb, 
 0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d, 
 0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00,  0xa8,  0x01,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78, 
 0xd2,  0xdb,  0xe3,  0x00,  0x82,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73, 
 0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88, 
 0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d, 
 0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65, 
 0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88, 
 0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x7a,  0x00,  0x00,  0x00,  0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c, 
 0x3e,  0xc2,  0xb4,  0x00,  0x80,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73, 
 0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00, 
 0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78,  0xd2,  0xdb,  0xe3,  0xf1, 
 0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0xf2,  0xb9, 
 0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0xf1,  0xb4,  0x9c, 
 0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xf2,  0x1b,  0x5d,  0xa0, 
 0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0xf1,  0x33,  0x19,  0xf5,  0x25, 
 0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::Pose>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef, 
 0xad,  0x80,  0x24,  0x00,  0x55,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3, 
 0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00,  0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00, 
 0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78, 
 0xd2,  0xdb,  0xe3,  0x00,  0x86,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee, 
 0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0x00,  0x68,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00, 
 0x84,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::JointAngles>::getTypeName()
{
  return "arm_msgs::JointAngles";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::JointAngles>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::JointAngles>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::JointAngles>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::JointAngles>::type_map_blob_sz() { return 402; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::JointAngles>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::JointAngles>::type_map_blob() {
  static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x7d,  0x40,  0xdf,  0xb4,  0x02,  0x15,  0xbd, 
 0xb5,  0x07,  0x9d,  0x5f,  0x69,  0xe9,  0x36,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x6c,  0xae,  0xba,  0x44,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x84,  0x3e,  0xca,  0x75,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x60,  0x50,  0xb6,  0x4b,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x6a,  0x0c,  0xf6,  0xed,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x83,  0x9b,  0x73,  0xfc,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x66,  0xed,  0xc8,  0x22,  0x00, 
 0xd5,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xd5,  0xef,  0x4b,  0xf5,  0x3f,  0xb1,  0xee, 
 0xdf,  0x8e,  0xc1,  0x98,  0x18,  0x78,  0xe9,  0x00,  0xbd,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x41,  0x6e,  0x67,  0x6c,  0x65, 
 0x73,  0x00,  0x00,  0x00,  0x91,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6a,  0x31,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6a,  0x32,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6a,  0x33,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6a,  0x34,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6a,  0x35,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6a,  0x36,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xd5,  0xef,  0x4b,  0xf5,  0x3f,  0xb1,  0xee,  0xdf,  0x8e,  0xc1,  0x98, 
 0x18,  0x78,  0xe9,  0xf1,  0x7d,  0x40,  0xdf,  0xb4,  0x02,  0x15,  0xbd,  0xb5,  0x07,  0x9d,  0x5f,  0x69, 
 0xe9,  0x36, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::JointAngles>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x7d,  0x40,  0xdf,  0xb4,  0x02,  0x15,  0xbd,  0xb5,  0x07,  0x9d,  0x5f, 
 0x69,  0xe9,  0x36,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xd5,  0xef,  0x4b,  0xf5,  0x3f,  0xb1,  0xee,  0xdf,  0x8e,  0xc1,  0x98, 
 0x18,  0x78,  0xe9,  0x00,  0xc1,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::arm_msgs::ArmCommand>::getTypeName()
{
  return "arm_msgs::ArmCommand";
}

template <> constexpr allowable_encodings_t TopicTraits<::arm_msgs::ArmCommand>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::arm_msgs::ArmCommand>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::arm_msgs::ArmCommand>::isKeyless()
{
  return true;
}

template <> constexpr extensibility TopicTraits<::arm_msgs::ArmCommand>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::arm_msgs::ArmCommand>::type_map_blob_sz() { return 1580; }
template<> constexpr unsigned int TopicTraits<::arm_msgs::ArmCommand>::type_info_blob_sz() { return 340; }
template<> inline const uint8_t * TopicTraits<::arm_msgs::ArmCommand>::type_map_blob() {
  static const uint8_t blob[] = {
 0x2f,  0x02,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0xf1,  0xdb,  0xfc,  0x0c,  0x36,  0x84,  0x53,  0x89, 
 0xe4,  0xdd,  0x32,  0x50,  0x5e,  0x43,  0xa3,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04, 
 0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x09,  0x9f,  0xb9,  0x95,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08, 
 0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x2d,  0x5f,  0x8a,  0xe9,  0xf1,  0xb8,  0x99, 
 0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x48,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xba, 
 0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x96,  0xb8,  0xc7, 
 0x8d,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00, 
 0x00,  0x01,  0x00,  0x00,  0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7, 
 0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0xf1, 
 0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x00, 
 0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef, 
 0x1d,  0x47,  0x57,  0xfe,  0x07,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9, 
 0x26,  0xda,  0x16,  0x39,  0x42,  0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d, 
 0xe3,  0x00,  0xef,  0x1d,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0xf1,  0x33,  0x19,  0xf5,  0x25, 
 0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x02,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d, 
 0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41, 
 0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb, 
 0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xf1, 
 0x29,  0x01,  0x86,  0x00,  0x38,  0x03,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0xf2,  0x49,  0xa5,  0x0b, 
 0x38,  0x88,  0xb0,  0x97,  0x41,  0x54,  0xdd,  0x56,  0x72,  0xa1,  0xe7,  0x00,  0x83,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x41,  0x72,  0x6d,  0x43,  0x6f,  0x6d, 
 0x6d,  0x61,  0x6e,  0x64,  0x00,  0x00,  0x00,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09, 
 0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d,  0x64,  0x5c,  0xd4,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c, 
 0x3c,  0x78,  0xd2,  0xdb,  0xe3,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x65, 
 0x00,  0x00,  0x00,  0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d,  0x64, 
 0x5c,  0xd4,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73, 
 0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x2a, 
 0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x71,  0x00,  0x00,  0x01,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x2a,  0x73,  0xbb, 
 0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x00,  0x5a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x00,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94, 
 0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78,  0xd2,  0xdb,  0xe3,  0x00,  0x00,  0x00,  0x82,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x00,  0x00, 
 0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc, 
 0xaf,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e, 
 0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x1b, 
 0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65,  0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00, 
 0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc, 
 0xaf,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x02,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73, 
 0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x1b,  0x5d,  0xa0, 
 0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00,  0x80,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x61,  0x72,  0x6d,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72, 
 0x6e,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00, 
 0xb8,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0xf2,  0x49,  0xa5,  0x0b,  0x38,  0x88,  0xb0,  0x97, 
 0x41,  0x54,  0xdd,  0x56,  0x72,  0xa1,  0xe7,  0xf1,  0xdb,  0xfc,  0x0c,  0x36,  0x84,  0x53,  0x89,  0xe4, 
 0xdd,  0x32,  0x50,  0x5e,  0x43,  0xa3,  0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5, 
 0xb8,  0x1d,  0x64,  0x5c,  0xd4,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32,  0xd2,  0x4a,  0x47, 
 0xeb,  0x3b,  0xa6,  0x1f,  0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e,  0xc6,  0xc7,  0x71,  0xe0, 
 0x8c,  0x10,  0x77,  0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d, 
 0x69,  0x42,  0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78,  0xd2,  0xdb, 
 0xe3,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb,  0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24, 
 0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee,  0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0xf1, 
 0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0xf2,  0x1b, 
 0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0xf1,  0x33,  0x19, 
 0xf5,  0x25,  0xa9,  0x0e,  0xfb,  0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::arm_msgs::ArmCommand>::type_info_blob() {
  static const uint8_t blob[] = {
 0x50,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0xa0,  0x00,  0x00,  0x00,  0x9c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xdb,  0xfc,  0x0c,  0x36,  0x84,  0x53,  0x89,  0xe4,  0xdd,  0x32,  0x50, 
 0x5e,  0x43,  0xa3,  0x00,  0x55,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb8,  0x99,  0xcd,  0xa8,  0x04,  0x50,  0x32, 
 0xd2,  0x4a,  0x47,  0xeb,  0x3b,  0xa6,  0x1f,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xba,  0xde,  0x67,  0x63,  0xb1,  0xd6,  0xa7,  0x2e,  0xce,  0x8a,  0x0e,  0x5d,  0x69,  0x42,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xbe,  0xdb,  0xdd,  0xbd,  0x08,  0xba,  0xcb, 
 0xdd,  0x2e,  0xc2,  0xef,  0xad,  0x80,  0x24,  0x00,  0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xb4,  0x9c,  0x4d,  0x1f,  0x9e,  0x94,  0xb3,  0x8f,  0x94,  0x8d,  0xe3,  0x00,  0xef,  0x1d,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x33,  0x19,  0xf5,  0x25,  0xa9,  0x0e,  0xfb, 
 0x3c,  0x49,  0x08,  0x3e,  0x5d,  0xd9,  0x26,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0xa0,  0x00,  0x00,  0x00,  0x9c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x49,  0xa5,  0x0b, 
 0x38,  0x88,  0xb0,  0x97,  0x41,  0x54,  0xdd,  0x56,  0x72,  0xa1,  0xe7,  0x00,  0x87,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xab,  0xe3,  0x44,  0xda,  0x09,  0x76,  0xc2,  0x76,  0xf5,  0xb8,  0x1d,  0x64,  0x5c,  0xd4,  0x00, 
 0x77,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x2a,  0x73,  0xbb,  0x82,  0xba,  0x2e, 
 0xc6,  0xc7,  0x71,  0xe0,  0x8c,  0x10,  0x77,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xa4,  0xb7,  0x85,  0x06,  0x94,  0x04,  0xa2,  0xb8,  0x5c,  0x3c,  0x78,  0xd2,  0xdb,  0xe3,  0x00, 
 0x86,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0xb3,  0x39,  0xcc,  0x88,  0x42,  0xee, 
 0x15,  0x90,  0x49,  0x60,  0x9f,  0xdc,  0xaf,  0x00,  0x68,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x1b,  0x5d,  0xa0,  0x4f,  0x14,  0x32,  0x4f,  0xae,  0x7d,  0xf5,  0x5c,  0x3e,  0xc2,  0xb4,  0x00, 
 0x84,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::arm_msgs::Time>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::Time>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::Header>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::Header>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::Point>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::Point>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::Quaternion>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::Quaternion>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::Pose>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::Pose>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::JointAngles>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::JointAngles>::getTypeName();
    }
};

template <>
struct topic_type_name<::arm_msgs::ArmCommand>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::arm_msgs::ArmCommand>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::arm_msgs::Time)
REGISTER_TOPIC_TYPE(::arm_msgs::Header)
REGISTER_TOPIC_TYPE(::arm_msgs::Point)
REGISTER_TOPIC_TYPE(::arm_msgs::Quaternion)
REGISTER_TOPIC_TYPE(::arm_msgs::Pose)
REGISTER_TOPIC_TYPE(::arm_msgs::JointAngles)
REGISTER_TOPIC_TYPE(::arm_msgs::ArmCommand)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::arm_msgs::Time>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::Time& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.sec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.nanosec()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::Time& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Time>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::Header>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.stamp(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.frame_id(), 256))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::Header& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Header>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::Point>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::Point& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::Point& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Point>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::Quaternion>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::Quaternion& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.w()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::Quaternion& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Quaternion>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::Pose>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::Pose& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.position(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.orientation(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::Pose& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::Pose>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::JointAngles>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::JointAngles& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j1()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j2()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j3()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j4()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j5()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.j6()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::JointAngles& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::JointAngles>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::JointAngles& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j1()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j2()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j3()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j4()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j5()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.j6()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::JointAngles& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::JointAngles>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::JointAngles& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j1()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j2()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j3()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j4()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j5()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.j6()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::JointAngles& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::JointAngles>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::JointAngles& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j1()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j2()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j3()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j4()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j5()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.j6()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::JointAngles& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::JointAngles>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::arm_msgs::ArmCommand>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::arm_msgs::ArmCommand& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::arm_msgs::ArmCommand& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::ArmCommand>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::arm_msgs::ArmCommand& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::arm_msgs::ArmCommand& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::ArmCommand>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::arm_msgs::ArmCommand& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::arm_msgs::ArmCommand& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::ArmCommand>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::arm_msgs::ArmCommand& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pose(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::arm_msgs::ArmCommand& instance, bool as_key) {
  auto &props = get_type_props<::arm_msgs::ArmCommand>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_ARM_MSGS_HPP
